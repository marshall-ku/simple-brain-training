{"version":3,"sources":["Keypad.js","Question.js","App.js","serviceWorker.js","index.js"],"names":["keys","Input","props","submit","confirm","state","input","setState","handleKeyDown","e","key","handleChange","target","value","touchable","window","bind","this","slice","prevProps","trueValue","replace","delete","id","className","readOnly","type","autoFocus","onKeyDown","onChange","React","Component","Keys","handleClick","item","click","map","onClick","Keypad","checkOK","Fragment","performance","now","Question","generateQuestion","lastResult","tmp1","tmp2","generateNumbers","randomNumber","first","second","questionDifficulty","index","min","max","start","Date","getTime","Math","round","random","questionLength","done","wrong","App","number","answer","setDifficulty","string","difficulty","difficultyString","setCount","count","generateQuestions","time","doneTime","restart","undefined","toFixed","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60c213ec.chunk.js","sourcesContent":["import React from \"react\";\nconst keys = [1, 2, 3, 4, 5, 6, 7, 8, 9, \"del\", 0, \"ok\"];\n\nclass Input extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: \"\",\n            touchable: \"ontouchstart\" in window,\n        };\n        this.submit = this.submit.bind(this);\n    }\n\n    submit = () => {\n        this.props.confirm(this.state.input);\n        this.setState({\n            input: \"\",\n        });\n    };\n\n    handleKeyDown = (e) => {\n        e.key === \"Enter\" && this.submit();\n    };\n\n    handleChange = (e) => {\n        this.setState({\n            input: e.target.value,\n        });\n    };\n\n    delete() {\n        this.setState({\n            input: this.state.input.slice(0, -1),\n        });\n    }\n\n    componentDidUpdate(prevProps) {\n        const { value } = this.props;\n        if (prevProps.value !== value) {\n            const trueValue = value.replace(/-(.*)/g, \"\");\n            if (trueValue) {\n                if (trueValue === \"del\") {\n                    this.delete();\n                } else if (trueValue === \"ok\") {\n                    this.submit();\n                } else {\n                    this.setState({\n                        input: this.state.input + trueValue,\n                    });\n                }\n            }\n        }\n    }\n\n    render() {\n        const { input } = this.state;\n        if (this.state.touchable) {\n            return (\n                <input\n                    id=\"input\"\n                    className=\"center\"\n                    value={input}\n                    readOnly\n                    type=\"number\"\n                ></input>\n            );\n        } else {\n            return (\n                <input\n                    id=\"input\"\n                    className=\"center\"\n                    value={input}\n                    autoFocus\n                    onKeyDown={this.handleKeyDown}\n                    onChange={this.handleChange}\n                    type=\"number\"\n                ></input>\n            );\n        }\n    }\n}\n\nclass Keys extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick = (item) => {\n        this.props.click(item);\n    };\n\n    render() {\n        return (\n            <div id=\"keys\" className=\"flex center\">\n                {keys.map((item) => {\n                    return (\n                        <button\n                            key={item}\n                            onClick={() => {\n                                this.handleClick(item);\n                            }}\n                        >\n                            <span>{item}</span>\n                        </button>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nclass Keypad extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: \"\",\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick = (item) => {\n        this.setState({\n            input: item,\n            checkOK: item === \"ok\",\n        });\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <Input\n                    value={`${this.state.input}${\n                        this.state.checkOK ? \"\" : `- ${performance.now()}`\n                    }`}\n                    confirm={this.props.confirm}\n                />\n                <Keys click={this.handleClick} />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Keypad;\n","import React from \"react\";\n\nclass Question extends React.Component {\n    constructor(props) {\n        super(props);\n        const { questionDifficulty } = this.props;\n        this.state = {\n            index: 0,\n            min: questionDifficulty[0],\n            max: questionDifficulty[1],\n            first: this.randomNumber(),\n            second: this.randomNumber(),\n            start: new Date().getTime(),\n        };\n    }\n\n    randomNumber() {\n        const { questionDifficulty } = this.props;\n        return (\n            Math.round(\n                Math.random() * (questionDifficulty[0] - questionDifficulty[1])\n            ) + questionDifficulty[1]\n        );\n    }\n\n    generateQuestion = (lastResult) => {\n        let tmp1, tmp2;\n        const generateNumbers = () => {\n            tmp1 = this.randomNumber();\n            tmp2 = this.randomNumber();\n\n            if (tmp1 * tmp2 === +lastResult) {\n                generateNumbers();\n            } else {\n                this.setState({\n                    first: tmp1,\n                    second: tmp2,\n                });\n            }\n        };\n        generateNumbers();\n    };\n\n    componentDidUpdate(prevProps) {\n        const { value } = this.props;\n        if (prevProps.value !== value) {\n            if (value) {\n                if (this.state.first * this.state.second === +value) {\n                    if (this.state.index === this.props.questionLength - 1) {\n                        this.props.done(\n                            (new Date().getTime() - this.state.start) / 1000\n                        );\n                    } else {\n                        this.setState({\n                            index: this.state.index + 1,\n                        });\n                        this.generateQuestion(value);\n                    }\n                } else {\n                    this.props.wrong();\n                }\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"question\">\n                {`${this.state.first} * ${this.state.second} = ?`}\n            </div>\n        );\n    }\n}\n\nexport default Question;\n","import React from \"react\";\nimport Keypad from \"./Keypad\";\nimport Question from \"./Question\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            difficulty: undefined,\n            difficultyString: \"\",\n            count: undefined,\n            done: false,\n            wrong: 0,\n        };\n        this.confirm = this.confirm.bind(this);\n        this.done = this.done.bind(this);\n        this.wrong = this.wrong.bind(this);\n    }\n\n    confirm = (number) => {\n        this.setState({\n            answer: number,\n        });\n    };\n\n    setDifficulty = (min, max, string) => {\n        this.setState({\n            difficulty: [min, max],\n            difficultyString: string,\n        });\n    };\n\n    setCount = (number) => {\n        this.setState(\n            {\n                count: number,\n            },\n            this.generateQuestions\n        );\n    };\n\n    wrong() {\n        this.setState({\n            wrong: this.state.wrong + 1,\n        });\n    }\n\n    done = (time) => {\n        this.setState({\n            done: true,\n            doneTime: time,\n        });\n    };\n\n    restart = () => {\n        this.setState({\n            difficulty: undefined,\n            difficultyString: \"\",\n            count: undefined,\n            done: false,\n            wrong: 0,\n        });\n    };\n\n    render() {\n        const {\n            done,\n            doneTime,\n            difficulty,\n            difficultyString,\n            count,\n            answer,\n            wrong,\n        } = this.state;\n        if (done) {\n            return (\n                <div id=\"result\">\n                    <h1>끝났습니다!</h1>\n                    <div className=\"result\">\n                        모든 문제를 푸는데 {doneTime}초가 걸리셨네요.\n                    </div>\n                    <div className=\"small\">\n                        <span>\n                            난이도 : <span>{difficultyString}</span>\n                        </span>\n                        <span>\n                            오답 : <span>{wrong} 회</span>\n                        </span>\n                        <span>\n                            문제 : <span>{count} 개</span>\n                        </span>\n                        <span>\n                            문제당 :{\" \"}\n                            <span>{(doneTime / count).toFixed(2)} 초</span>\n                        </span>\n                    </div>\n                    <div>\n                        <button className=\"button\" onClick={this.restart}>\n                            다시 시작\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (difficulty && count) {\n            return (\n                <React.Fragment>\n                    <Question\n                        questionDifficulty={difficulty}\n                        questionLength={count}\n                        wrong={this.wrong}\n                        done={this.done}\n                        value={answer}\n                    />\n                    <Keypad confirm={this.confirm} />\n                </React.Fragment>\n            );\n        } else {\n            if (!difficulty) {\n                return (\n                    <ul id=\"select\">\n                        <li onClick={() => this.setDifficulty(2, 10, \"쉬움\")}>\n                            쉬움 (2 ~ 10)\n                        </li>\n                        <li onClick={() => this.setDifficulty(2, 15, \"보통\")}>\n                            보통 (2 ~ 15)\n                        </li>\n                        <li onClick={() => this.setDifficulty(2, 20, \"어려움\")}>\n                            어려움 (2 ~ 20)\n                        </li>\n                        <li\n                            onClick={() =>\n                                this.setDifficulty(11, 20, \"아주 어려움\")\n                            }\n                        >\n                            아주 어려움 (11 ~ 20)\n                        </li>\n                    </ul>\n                );\n            } else {\n                return (\n                    <ul id=\"select\">\n                        <li onClick={() => this.setCount(10)}>10 문제</li>\n                        <li onClick={() => this.setCount(20)}>20 문제</li>\n                        <li onClick={() => this.setCount(50)}>50 문제</li>\n                        <li onClick={() => this.setCount(100)}>100 문제</li>\n                    </ul>\n                );\n            }\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}