{"version":3,"sources":["Keypad.tsx","Question.tsx","App.tsx","DarkTheme.tsx","index.tsx"],"names":["keys","Input","props","submit","confirm","state","input","setState","handleKeyDown","event","key","handleChange","length","target","value","touchable","window","bind","this","slice","prevProps","trueValue","replace","delete","id","className","readOnly","type","autoFocus","onKeyDown","onChange","React","Component","Keys","handleClick","item","click","map","onClick","Keypad","performance","now","Question","generateQuestion","lastResult","tmp1","tmp2","generateNumbers","randomNumber","first","second","questionDifficulty","index","min","max","start","Date","getTime","Math","round","random","questionLength","done","wrong","App","number","answer","setDifficulty","string","difficulty","difficultyString","setCount","count","time","doneTime","restart","toFixed","DarkTheme","toggleTheme","dark","html","document","documentElement","classList","remove","localStorage","setItem","add","darkTheme","role","aria-label","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3683d6a6.chunk.js","sourcesContent":["import React from \"react\";\r\nconst keys = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"del\", \"0\", \"ok\"];\r\n\r\nclass Input extends React.Component<InputProps, InputState> {\r\n    constructor(props: InputProps) {\r\n        super(props);\r\n        this.state = {\r\n            input: \"\",\r\n            touchable: \"ontouchstart\" in window,\r\n        };\r\n        this.submit = this.submit.bind(this);\r\n    }\r\n\r\n    submit = () => {\r\n        this.props.confirm(+this.state.input);\r\n        this.setState({\r\n            input: \"\",\r\n        });\r\n    };\r\n\r\n    handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        event.key === \"Enter\" && this.submit();\r\n    };\r\n\r\n    handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (this.state.input.length >= 5) {\r\n            this.setState({\r\n                input: event.target.value[5],\r\n            });\r\n        } else {\r\n            this.setState({\r\n                input: event.target.value,\r\n            });\r\n        }\r\n    };\r\n\r\n    delete() {\r\n        this.setState({\r\n            input: this.state.input.slice(0, -1),\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps: InputProps) {\r\n        const { value } = this.props;\r\n        if (prevProps.value !== value) {\r\n            const trueValue = value.replace(/-(.*)/g, \"\");\r\n            if (trueValue) {\r\n                if (trueValue === \"del\") {\r\n                    this.delete();\r\n                } else if (trueValue === \"ok\") {\r\n                    this.submit();\r\n                } else {\r\n                    if (this.state.input.length >= 5) {\r\n                        this.setState({\r\n                            input: trueValue,\r\n                        });\r\n                    } else {\r\n                        this.setState({\r\n                            input: this.state.input + trueValue,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { input } = this.state;\r\n        if (this.state.touchable) {\r\n            return (\r\n                <input\r\n                    id=\"input\"\r\n                    className=\"center\"\r\n                    value={input}\r\n                    readOnly\r\n                    type=\"number\"\r\n                ></input>\r\n            );\r\n        } else {\r\n            return (\r\n                <input\r\n                    id=\"input\"\r\n                    className=\"center\"\r\n                    value={input}\r\n                    autoFocus\r\n                    onKeyDown={this.handleKeyDown}\r\n                    onChange={this.handleChange}\r\n                    type=\"number\"\r\n                ></input>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nclass Keys extends React.Component<KeysProps, KeysState> {\r\n    constructor(props: KeysProps) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick = (item: string) => {\r\n        this.props.click(item);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"keys\" className=\"flex center\">\r\n                {keys.map((item) => {\r\n                    return (\r\n                        <button\r\n                            key={item}\r\n                            onClick={() => {\r\n                                this.handleClick(item);\r\n                            }}\r\n                        >\r\n                            <span>{item}</span>\r\n                        </button>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default class Keypad extends React.Component<KeypadProps, KeypadState> {\r\n    constructor(props: KeypadProps) {\r\n        super(props);\r\n        this.state = {\r\n            input: \"\",\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick = (item: string) => {\r\n        this.setState({\r\n            input: item,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { input } = this.state;\r\n        return (\r\n            <>\r\n                <Input\r\n                    value={`${input}${\r\n                        input === \"ok\" ? \"\" : `- ${performance.now()}`\r\n                    }`}\r\n                    confirm={this.props.confirm}\r\n                />\r\n                <Keys click={this.handleClick} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class Question extends React.Component<\r\n    QuestionProps,\r\n    QuestionState\r\n> {\r\n    constructor(props: QuestionProps) {\r\n        super(props);\r\n        const { questionDifficulty } = this.props;\r\n        this.state = {\r\n            index: 0,\r\n            min: questionDifficulty[0],\r\n            max: questionDifficulty[1],\r\n            first: this.randomNumber(),\r\n            second: this.randomNumber(),\r\n            start: new Date().getTime(),\r\n        };\r\n    }\r\n\r\n    randomNumber(): number {\r\n        const { questionDifficulty } = this.props;\r\n        return (\r\n            Math.round(\r\n                Math.random() * (questionDifficulty[0] - questionDifficulty[1])\r\n            ) + questionDifficulty[1]\r\n        );\r\n    }\r\n\r\n    generateQuestion = (lastResult: number) => {\r\n        let tmp1, tmp2;\r\n        const generateNumbers = () => {\r\n            tmp1 = this.randomNumber();\r\n            tmp2 = this.randomNumber();\r\n\r\n            if (tmp1 * tmp2 === lastResult) {\r\n                generateNumbers();\r\n            } else {\r\n                this.setState({\r\n                    first: tmp1,\r\n                    second: tmp2,\r\n                });\r\n            }\r\n        };\r\n        generateNumbers();\r\n    };\r\n\r\n    componentDidUpdate(prevProps: QuestionProps) {\r\n        const { value } = this.props;\r\n        const { index } = this.state;\r\n        if (prevProps.value !== value) {\r\n            if (value) {\r\n                if (this.state.first * this.state.second === value) {\r\n                    if (index === this.props.questionLength - 1) {\r\n                        this.props.done(\r\n                            (new Date().getTime() - this.state.start) / 1000\r\n                        );\r\n                    } else {\r\n                        this.setState({\r\n                            index: index + 1,\r\n                        });\r\n                        this.generateQuestion(value);\r\n                    }\r\n                } else {\r\n                    this.props.wrong();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"question\">\r\n                {`${this.state.first} * ${this.state.second} = ?`}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Keypad from \"./Keypad\";\r\nimport Question from \"./Question\";\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n    constructor(props: AppProps) {\r\n        super(props);\r\n        this.state = {\r\n            difficulty: [0, 0],\r\n            difficultyString: \"\",\r\n            count: 0,\r\n            done: false,\r\n            wrong: 0,\r\n        };\r\n        this.confirm = this.confirm.bind(this);\r\n        this.done = this.done.bind(this);\r\n        this.wrong = this.wrong.bind(this);\r\n    }\r\n\r\n    confirm = (number: number) => {\r\n        this.setState({\r\n            answer: number,\r\n        });\r\n    };\r\n\r\n    setDifficulty = (min: number, max: number, string: string) => {\r\n        this.setState({\r\n            difficulty: [min, max],\r\n            difficultyString: string,\r\n        });\r\n    };\r\n\r\n    setCount = (number: number) => {\r\n        this.setState({\r\n            count: number,\r\n        });\r\n    };\r\n\r\n    wrong() {\r\n        this.setState({\r\n            wrong: this.state.wrong + 1,\r\n        });\r\n    }\r\n\r\n    done = (time: number) => {\r\n        this.setState({\r\n            done: true,\r\n            doneTime: time,\r\n        });\r\n    };\r\n\r\n    restart = () => {\r\n        this.setState({\r\n            difficulty: [0, 0],\r\n            difficultyString: \"\",\r\n            count: 0,\r\n            done: false,\r\n            wrong: 0,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            done,\r\n            doneTime,\r\n            difficulty,\r\n            difficultyString,\r\n            count,\r\n            answer,\r\n            wrong,\r\n        } = this.state;\r\n\r\n        if (done && doneTime) {\r\n            return (\r\n                <div id=\"result\">\r\n                    <h1>끝났습니다!</h1>\r\n                    <div className=\"result\">\r\n                        모든 문제를 푸는데 {doneTime}초가 걸리셨네요.\r\n                    </div>\r\n                    <div className=\"small\">\r\n                        <span>\r\n                            난이도 : <span>{difficultyString}</span>\r\n                        </span>\r\n                        <span>\r\n                            오답 : <span>{wrong} 회</span>\r\n                        </span>\r\n                        <span>\r\n                            문제 : <span>{count} 개</span>\r\n                        </span>\r\n                        <span>\r\n                            문제당 :{\" \"}\r\n                            <span>{(doneTime / count).toFixed(2)} 초</span>\r\n                        </span>\r\n                    </div>\r\n                    <div>\r\n                        <button className=\"button\" onClick={this.restart}>\r\n                            다시 시작\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else if (difficulty && count) {\r\n            return (\r\n                <>\r\n                    <Question\r\n                        questionDifficulty={difficulty}\r\n                        questionLength={count}\r\n                        wrong={this.wrong}\r\n                        done={this.done}\r\n                        value={answer}\r\n                    />\r\n                    <Keypad confirm={this.confirm} />\r\n                </>\r\n            );\r\n        } else {\r\n            if (!difficulty[0]) {\r\n                return (\r\n                    <ul id=\"select\">\r\n                        <li onClick={() => this.setDifficulty(2, 10, \"쉬움\")}>\r\n                            쉬움 (2 ~ 10)\r\n                        </li>\r\n                        <li onClick={() => this.setDifficulty(2, 15, \"보통\")}>\r\n                            보통 (2 ~ 15)\r\n                        </li>\r\n                        <li onClick={() => this.setDifficulty(2, 20, \"어려움\")}>\r\n                            어려움 (2 ~ 20)\r\n                        </li>\r\n                        <li\r\n                            onClick={() =>\r\n                                this.setDifficulty(11, 20, \"아주 어려움\")\r\n                            }\r\n                        >\r\n                            아주 어려움 (11 ~ 20)\r\n                        </li>\r\n                    </ul>\r\n                );\r\n            } else {\r\n                return (\r\n                    <ul id=\"select\">\r\n                        <li onClick={() => this.setCount(10)}>10 문제</li>\r\n                        <li onClick={() => this.setCount(20)}>20 문제</li>\r\n                        <li onClick={() => this.setCount(50)}>50 문제</li>\r\n                        <li onClick={() => this.setCount(100)}>100 문제</li>\r\n                    </ul>\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        darkTheme: boolean;\r\n    }\r\n}\r\n\r\nexport default class DarkTheme extends React.Component<\r\n    DarkThemeProps,\r\n    DarkThemeState\r\n> {\r\n    constructor(props: DarkThemeProps) {\r\n        super(props);\r\n        this.state = {\r\n            dark: window.darkTheme,\r\n        };\r\n    }\r\n\r\n    toggleTheme = () => {\r\n        const { dark } = this.state;\r\n        const html = document.documentElement;\r\n\r\n        dark\r\n            ? this.setState(\r\n                  {\r\n                      dark: false,\r\n                  },\r\n                  () => {\r\n                      html.classList.remove(\"dark\");\r\n                      localStorage.setItem(\"dark\", \"false\");\r\n                  }\r\n              )\r\n            : this.setState(\r\n                  {\r\n                      dark: true,\r\n                  },\r\n                  () => {\r\n                      html.classList.add(\"dark\");\r\n                      localStorage.setItem(\"dark\", \"true\");\r\n                  }\r\n              );\r\n    };\r\n\r\n    render() {\r\n        const { dark } = this.state;\r\n        return (\r\n            <>\r\n                <button id=\"darkThemeButton\" onClick={this.toggleTheme}>\r\n                    <span\r\n                        role=\"img\"\r\n                        aria-label={dark ? \"밝은 모드\" : \"어두운 모드\"}\r\n                    >\r\n                        {dark ? \"☀️\" : \"🌙\"}\r\n                    </span>\r\n                </button>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport DarkTheme from \"./DarkTheme\";\r\n\r\nReactDOM.render(\r\n    <>\r\n        <DarkTheme />\r\n        <App />\r\n    </>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}